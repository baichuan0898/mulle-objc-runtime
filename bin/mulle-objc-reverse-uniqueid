#! /bin/sh
#
# (c) 2016 Mulle kybernetiK
# code by Nat!
#

usage()
{
   cat <<EOF >&2
Usage:
   mulle-objc-reverse-uniqueid.sh <uniqueid|command> [pattern] [paths]

   Search through sources to find a string for the given hash.
   It can be useful for optimized builds, where you do not have a reverse
   table in the runtime and the error message is just gives the uniqueid.
   This can take a while though...

Example:
   mulle-objc-reverse-uniqueid e37f0136 "*.h" /usr/local/include .

   check if the string "init" (hash e37f0136) appears anywhere in the header
   files in /usr/local/include or the current directory.

Arguments:
   uniqueid : the uniqueid to search, it may be partial

   command  : 'words' or 'hashed-words', where
              'words' lists all words found in [paths] files matching [pattern]
              'hashed-words' is like 'words' but prefixes each line with
              the 64 bit uniqueid

   pattern  : filename pattern to search through, default is *.[hcm]

   paths    : paths to search *recursively* for files matching [pattern].
              It defaults to '.'. You can also use this to add more grep
              patterns and other grep flags.

EOF
   exit 1
}



HASH=$1
[ "$#" -ne 0 ] && shift

case "$HASH" in
   0x*)
      HASH="`echo "$HASH" | sed 's/^0x\(.*\)/\1/g'`"
      ;;
esac
[ -z "${HASH}" ] && usage


PATTERN="${1:-*.[hcm]}"
[ "$#" -ne 0 ] && shift


PATHS="$*"
if [ -z "${PATHS}" ]
then
   PATHS="."
fi

# prefer sibling mulle-objc-lista
if [ -z "${MULLE_OBJC_UNIQUEID}" ]
then
   MULLE_OBJC_UNIQUEID="${0%/*}/mulle-objc-uniqueid"
   if [ ! -x "${MULLE_OBJC_UNIQUEID}" ]
   then
      MULLE_OBJC_UNIQUEID="`command -v mulle-objc-uniqueid`"
      [ -z "${MULLE_OBJC_UNIQUEID}" ] && echo "mulle-objc-uniqueid not in PATH" >&2 && exit 1
   fi
fi

grep -h -s -o -E '\w+' -r --include "${PATTERN}" ${PATHS} | \
   egrep -v '^[0-9]' | \
   sort -u | \
while read -r word
do
   hash="`"${MULLE_OBJC_UNIQUEID}" "${word}"`"
   case "${HASH}" in
      words)
         echo "${word}"
      ;;

      hashed-words)
         echo "${hash} ${word}"
      ;;

      *)
         case "${hash}" in
            "${HASH}"*)
               echo "${word}"
            ;;
         esac
      ;;
   esac
done
